import { NextRequest, NextResponse } from 'next/server';
import { getGeminiService } from '@/lib/services/gemini-service';

// üéØ SISTEMA PROFISSIONAL DE MAPEAMENTO DE N√öMEROS
const ALLOWED_NUMBERS_MAP: Record<string, string> = {
  // Mapeamento inteligente: n√∫meros de teste ‚Üí n√∫meros reais
  '555584557096': '+55984557096',   // N√∫mero atual que chega ‚Üí Seu n√∫mero real
  '5555984557096': '+55984557096',  // Varia√ß√£o com DDD duplicado
  '55584557096': '+55984557096',    // Sem primeiro 5
  '55984557096': '+55984557096',    // Formato correto
  '984557096': '+55984557096',      // Apenas n√∫mero local
  '5584557096': '+55984557096',     // Sem c√≥digo pa√≠s
  
  // Adicione outros mapeamentos conforme necess√°rio
  // 'numeroTeste': '+numeroReal'
};

// üõ°Ô∏è WHITELIST DE N√öMEROS PERMITIDOS (Meta Development)
const DEVELOPMENT_WHITELIST = [
  '+55984557096',   // Carlos - n√∫mero principal
  '+5511999999999', // N√∫mero de teste adicional
];

// üß† FUN√á√ÉO INTELIGENTE DE MAPEAMENTO DE N√öMEROS
function mapearNumeroInteligente(numero: string): string {
  console.log('üß† [SMART MAP] Entrada:', numero);
  
  // 1. Limpar n√∫mero
  const numeroLimpo = numero.replace(/\D/g, '');
  console.log('üß† [SMART MAP] Limpo:', numeroLimpo);
  
  // 2. Mapeamento direto (mais r√°pido)
  if (ALLOWED_NUMBERS_MAP[numeroLimpo]) {
    const mapeado = ALLOWED_NUMBERS_MAP[numeroLimpo];
    console.log(`üß† [SMART MAP] ‚úÖ MAPEADO DIRETO: ${numeroLimpo} ‚Üí ${mapeado}`);
    return mapeado;
  }
  
  // 3. Mapeamento por padr√£o (√∫ltimos 9 d√≠gitos)
  for (const [pattern, realNumber] of Object.entries(ALLOWED_NUMBERS_MAP)) {
    const patternSuffix = pattern.slice(-9); // √öltimos 9 d√≠gitos
    const numeroSuffix = numeroLimpo.slice(-9);
    
    if (patternSuffix === numeroSuffix) {
      console.log(`üß† [SMART MAP] ‚úÖ PADR√ÉO ENCONTRADO: ${numeroLimpo} ‚Üí ${realNumber}`);
      return realNumber;
    }
  }
  
  // 4. Fallback inteligente para n√∫mero principal
  const fallback = '+55984557096';
  console.log(`üß† [SMART MAP] ‚ö†Ô∏è FALLBACK: ${numeroLimpo} ‚Üí ${fallback}`);
  return fallback;
}

// üîí VALIDA√á√ÉO DE N√öMERO PERMITIDO
function isNumeroPermitido(numero: string): boolean {
  const permitido = DEVELOPMENT_WHITELIST.includes(numero);
  console.log(`ÔøΩÔøΩ [VALIDATION] ${numero} ‚Üí ${permitido ? 'PERMITIDO' : 'BLOQUEADO'}`);
  return permitido;
}

// Debug inicial otimizado
console.log('üöÄ [SYSTEM] Iniciando sistema profissional...');
console.log('üìä [CONFIG] Status das vari√°veis:');
console.log('   WEBHOOK_TOKEN:', process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN ? `‚úÖ (${process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN.length} chars)` : '‚ùå FALTANDO');
console.log('   PHONE_ID:', process.env.WHATSAPP_PHONE_NUMBER_ID || '‚ùå FALTANDO');
console.log('   ACCESS_TOKEN:', process.env.WHATSAPP_ACCESS_TOKEN ? `‚úÖ (${process.env.WHATSAPP_ACCESS_TOKEN.length} chars)` : '‚ùå FALTANDO');
console.log('   GEMINI_KEY:', process.env.GOOGLE_GEMINI_API_KEY ? `‚úÖ (${process.env.GOOGLE_GEMINI_API_KEY.length} chars)` : '‚ùå FALTANDO');
console.log('üó∫Ô∏è [CONFIG] Mapeamentos configurados:', Object.keys(ALLOWED_NUMBERS_MAP).length);
console.log('üîê [CONFIG] N√∫meros na whitelist:', DEVELOPMENT_WHITELIST.length);

// GET handler - Verifica√ß√£o do Webhook pelo Facebook
export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const mode = searchParams.get('hub.mode');
  const token = searchParams.get('hub.verify_token');
  const challenge = searchParams.get('hub.challenge');

  console.log('üîê [WEBHOOK VERIFICATION] Dados recebidos:', {
    mode,
    tokenReceived: token,
    tokenExpected: process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN,
    tokensMatch: token === process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN,
    challenge: challenge?.substring(0, 20) + '...'
  });

  if (mode === 'subscribe' && token === process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN) {
    console.log('‚úÖ [WEBHOOK] Verifica√ß√£o bem-sucedida!');
    return new NextResponse(challenge, {
      status: 200,
      headers: {
        'Content-Type': 'text/plain',
        'Cache-Control': 'no-cache'
      },
    });
  }

  console.log('‚ùå [WEBHOOK] Verifica√ß√£o falhou');
  return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
}

// POST handler - Processamento principal
export async function POST(request: NextRequest) {
  try {
    console.log('üì® [WEBHOOK] Nova mensagem recebida');
    
    // Valida√ß√£o cr√≠tica de configura√ß√£o
    if (!process.env.WHATSAPP_PHONE_NUMBER_ID || !process.env.WHATSAPP_ACCESS_TOKEN) {
      console.error('‚ùå [WEBHOOK] Configura√ß√£o cr√≠tica faltando');
      return NextResponse.json({ error: 'Configuration error' }, { status: 500 });
    }

    const body = await request.json();
    console.log('üì¶ [WEBHOOK] Payload recebido:', JSON.stringify(body, null, 2));

    // Extrair estrutura do webhook
    const entry = body.entry?.[0];
    const changes = entry?.changes?.[0];
    const value = changes?.value;
    const messages = value?.messages;

    console.log('üîç [WEBHOOK] An√°lise estrutural:', {
      hasEntry: !!entry,
      hasChanges: !!changes,
      hasValue: !!value,
      hasMessages: !!messages,
      messageCount: messages?.length || 0
    });

    if (!messages?.length) {
      console.log('‚ÑπÔ∏è [WEBHOOK] Nenhuma mensagem para processar');
      return NextResponse.json({ status: 'ok' }, { status: 200 });
    }

    console.log(`üîÑ [WEBHOOK] Processando ${messages.length} mensagem(ns)`);

    // Processar cada mensagem com sistema robusto
    for (const message of messages) {
      await processMessageProfessional(message);
    }

    return NextResponse.json({ status: 'ok' }, { status: 200 });

  } catch (error) {
    console.error('‚ùå [WEBHOOK] Erro cr√≠tico no sistema:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// ÔøΩÔøΩ PROCESSAMENTO PROFISSIONAL DE MENSAGENS
async function processMessageProfessional(message: any): Promise<void> {
  const { from, text, type, id, timestamp } = message;
  
  console.log('üîÑ [PROCESS] Iniciando processamento profissional:', {
    from,
    type,
    messageId: id,
    timestamp,
    hasText: !!text?.body
  });

  try {
    // Valida√ß√£o de tipo
    if (type !== 'text') {
      console.log(`‚ö†Ô∏è [PROCESS] Tipo n√£o suportado: ${type} - IGNORADO`);
      return;
    }

    const userMessage = text?.body?.trim();
    if (!userMessage) {
      console.log('‚ùå [PROCESS] Mensagem vazia - IGNORADA');
      return;
    }

    const lowerMessage = userMessage.toLowerCase();
    console.log(`üí¨ [PROCESS] Mensagem: "${userMessage}"`);

    // üéØ COMANDOS ADMINISTRATIVOS PROFISSIONAIS
    
    if (lowerMessage === '/test' || lowerMessage === 'test') {
      console.log('üß™ [COMMAND] Test - Verificando conectividade');
      await enviarMensagemProfissional(from, '‚úÖ SISTEMA OPERACIONAL\n\nüîó Conectividade: OK\nüì° WhatsApp API: Ativa\nü§ñ Bot: Funcionando\n\nTudo funcionando perfeitamente!');
      return;
    }

    if (lowerMessage === '/debug' || lowerMessage === 'debug') {
      console.log('üîß [COMMAND] Debug - Gerando relat√≥rio');
      const debugInfo = await gerarRelatorioDebug(from, message);
      await enviarMensagemProfissional(from, debugInfo);
      return;
    }

    if (lowerMessage === '/limpar' || lowerMessage === 'limpar') {
      console.log('üóëÔ∏è [COMMAND] Limpar hist√≥rico');
      try {
        const geminiService = getGeminiService();
        geminiService.clearHistory(from);
        await enviarMensagemProfissional(from, 'üóëÔ∏è HIST√ìRICO LIMPO\n\nTodo o hist√≥rico da conversa foi removido.\nVamos come√ßar uma nova conversa! üöÄ');
      } catch (error) {
        console.error('‚ùå [COMMAND] Erro ao limpar:', error);
        await enviarMensagemProfissional(from, '‚ùå Erro ao limpar hist√≥rico.\nTente novamente em alguns instantes.');
      }
      return;
    }

    if (lowerMessage === '/ajuda' || lowerMessage === 'ajuda' || lowerMessage === '/help') {
      console.log('‚ùì [COMMAND] Ajuda');
      const helpMessage = `ü§ñ *COMANDOS DISPON√çVEIS*\n\n` +
        `üß™ */test* - Testar conectividade\n` +
        `üîß */debug* - Informa√ß√µes do sistema\n` +
        `üóëÔ∏è */limpar* - Limpar hist√≥rico\n` +
        `‚ùì */ajuda* - Esta mensagem\n\n` +
        `üí¨ *COMO USAR:*\n` +
        `Envie qualquer mensagem para conversar comigo!\n` +
        `Sou um assistente inteligente pronto para ajudar.\n\n` +
        `üöÄ *STATUS: OPERACIONAL*`;
      await enviarMensagemProfissional(from, helpMessage);
      return;
    }

    // ü§ñ PROCESSAMENTO COM IA
    if (!process.env.GOOGLE_GEMINI_API_KEY) {
      console.warn('‚ö†Ô∏è [PROCESS] Gemini n√£o configurado');
      await enviarMensagemProfissional(from, '‚öôÔ∏è SISTEMA EM CONFIGURA√á√ÉO\n\nA IA est√° sendo configurada.\nUse */test* para verificar outros recursos.\n\nTente novamente em alguns minutos.');
      return;
    }

    try {
      console.log('ü§ñ [AI] Processando com Gemini...');
      const geminiService = getGeminiService();
      const aiResponse = await geminiService.generateResponse(userMessage, from);
      
      console.log(`ü§ñ [AI] Resposta gerada (${aiResponse.length} chars)`);
      await enviarMensagemProfissional(from, aiResponse);
      console.log('‚úÖ [AI] Resposta enviada com sucesso');
      
    } catch (aiError) {
      console.error('‚ùå [AI] Erro no processamento:', aiError);
      await enviarMensagemProfissional(from, 'ü§ñ ASSISTENTE TEMPORARIAMENTE INDISPON√çVEL\n\nEstou com dificuldades moment√¢neas.\nUse */test* para verificar outros recursos.\n\nTente novamente em alguns instantes.');
    }

  } catch (error) {
    console.error('‚ùå [PROCESS] Erro cr√≠tico no processamento:', error);
    
    // Sistema de recupera√ß√£o autom√°tica
    try {
      await enviarMensagemProfissional(from, '‚ö†Ô∏è ERRO TEMPOR√ÅRIO DETECTADO\n\nO sistema detectou um problema moment√¢neo.\nJ√° estou me recuperando automaticamente.\n\nUse */test* para verificar o status.');
    } catch (recoveryError) {
      console.error('‚ùå [RECOVERY] Falha cr√≠tica na recupera√ß√£o:', recoveryError);
    }
  }
}

// üöÄ FUN√á√ÉO PROFISSIONAL DE ENVIO DE MENSAGENS
async function enviarMensagemProfissional(to: string, text: string): Promise<boolean> {
  try {
    console.log('üì§ [SEND] Iniciando envio profissional...');
    
    // 1. Mapeamento inteligente do n√∫mero
    const numeroMapeado = mapearNumeroInteligente(to);
    
    // 2. Valida√ß√£o de permiss√£o
    const isPermitido = isNumeroPermitido(numeroMapeado);
    
    if (!isPermitido) {
      console.warn(`‚ö†Ô∏è [SEND] ATEN√á√ÉO: N√∫mero ${numeroMapeado} n√£o est√° na whitelist de desenvolvimento`);
      console.warn('üîß [SEND] Tentativa de envio prosseguir√° para debug');
    }

    // 3. Prepara√ß√£o do payload otimizado
    const payload = {
      messaging_product: 'whatsapp',
      recipient_type: 'individual',
      to: numeroMapeado,
      type: 'text',
      text: {
        preview_url: false,
        body: text.substring(0, 4096) // Limite da API
      }
    };

    console.log('üìã [SEND] Detalhes do envio:', {
      numeroOriginal: to,
      numeroMapeado: numeroMapeado,
      permitido: isPermitido,
      tamanhoTexto: text.length,
      phoneNumberId: process.env.WHATSAPP_PHONE_NUMBER_ID
    });

    console.log('üìù [SEND] Payload final:', JSON.stringify(payload, null, 2));

    // 4. Envio via WhatsApp Business API
    const url = `https://graph.facebook.com/v22.0/${process.env.WHATSAPP_PHONE_NUMBER_ID}/messages`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.WHATSAPP_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
        'User-Agent': 'WhatsApp-Bot-Professional/1.0'
      },
      body: JSON.stringify(payload),
    });

    const responseText = await response.text();
    
    console.log('üì® [SEND] Resposta da API:', {
      status: response.status,
      statusText: response.statusText,
      headers: Object.fromEntries(response.headers.entries()),
      bodyLength: responseText.length,
      body: responseText
    });

    if (!response.ok) {
      throw new Error(`WhatsApp API Error ${response.status}: ${responseText}`);
    }

    console.log('‚úÖ [SEND] MENSAGEM ENVIADA COM SUCESSO!');
    return true;

  } catch (error) {
    console.error('‚ùå [SEND] ERRO NO ENVIO:', error);
    console.log('üîÑ [SEND] Sistema mant√©m opera√ß√£o normal para pr√≥ximas mensagens');
    return false;
  }
}

// üìä GERADOR DE RELAT√ìRIO DE DEBUG PROFISSIONAL
async function gerarRelatorioDebug(from: string, message: any): Promise<string> {
  const numeroMapeado = mapearNumeroInteligente(from);
  const isPermitido = isNumeroPermitido(numeroMapeado);
  const timestamp = new Date(parseInt(message.timestamp) * 1000);
  
  const relatorio = `üîß *RELAT√ìRIO DE DEBUG PROFISSIONAL*\n\n` +
    
    `üì± *AN√ÅLISE DE N√öMEROS:*\n` +
    `‚Ä¢ Original: \`${from}\`\n` +
    `‚Ä¢ Mapeado: \`${numeroMapeado}\`\n` +
    `‚Ä¢ Status: ${isPermitido ? '‚úÖ PERMITIDO' : '‚ùå N√ÉO PERMITIDO'}\n` +
    `‚Ä¢ Mapeamentos: ${Object.keys(ALLOWED_NUMBERS_MAP).length}\n\n` +
    
    `‚öôÔ∏è *CONFIGURA√á√ÉO DO SISTEMA:*\n` +
    `‚Ä¢ Gemini API: ${process.env.GOOGLE_GEMINI_API_KEY ? '‚úÖ CONFIGURADA' : '‚ùå FALTANDO'}\n` +
    `‚Ä¢ WhatsApp API: ${process.env.WHATSAPP_ACCESS_TOKEN ? '‚úÖ CONFIGURADA' : '‚ùå FALTANDO'}\n` +
    `‚Ä¢ Phone Number ID: ${process.env.WHATSAPP_PHONE_NUMBER_ID || '‚ùå FALTANDO'}\n` +
    `‚Ä¢ Webhook Token: ${process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN ? '‚úÖ CONFIGURADO' : '‚ùå FALTANDO'}\n\n` +
    
    `üìä *DADOS DA MENSAGEM:*\n` +
    `‚Ä¢ Message ID: \`${message.id}\`\n` +
    `‚Ä¢ Timestamp: ${timestamp.toISOString()}\n` +
    `‚Ä¢ Tipo: ${message.type}\n` +
    `‚Ä¢ Tamanho: ${message.text?.body?.length || 0} chars\n\n` +
    
    `üéØ *STATUS GERAL:*\n` +
    `‚Ä¢ Sistema: üü¢ OPERACIONAL\n` +
    `‚Ä¢ Conectividade: üü¢ ATIVA\n` +
    `‚Ä¢ Whitelist: ${DEVELOPMENT_WHITELIST.length} n√∫meros\n` +
    `‚Ä¢ Modo: DESENVOLVIMENTO\n\n` +
    
    `üöÄ *SISTEMA PROFISSIONAL ATIVO*`;
    
  return relatorio;
}
