import { NextRequest, NextResponse } from 'next/server';
import { getGeminiService } from '@/lib/services/gemini-service';

// üéØ FORMATOS PARA TESTAR - BASEADO NO +55 (55) 98455-7096
const FORMATOS_TESTE = [
  '+555598455709',    // Sem √∫ltimo 6
  '+5555984557096',   // Como est√° chegando
  '+55984557096',     // Formato correto esperado
  '+559845570',       // Apenas come√ßo
  '+5598455',         // Mais curto
  '+555984557',       // M√©dio
  '+55559845570',     // Sem √∫ltimos 2
  '+555984557096',    // Sem um 5
  '+5555598455709',   // Extra longo
  '55984557096',      // Sem +
  '5555984557096',    // Sem + com DDD duplicado
  '+5555984557',      // Truncado
  '+55984557',        // Mais truncado
  '+555984',          // Muito truncado
  '+55598455709',     // Sem √∫ltimo d√≠gito
  '+555598455',       // Truncado m√©dio
];

// üß† SISTEMA PROFISSIONAL DE MAPEAMENTO
const ALLOWED_NUMBERS_MAP: Record<string, string[]> = {
  // Para cada n√∫mero que chega, definir TODOS os formatos para testar
  '555584557096': FORMATOS_TESTE,
  '5555984557096': FORMATOS_TESTE,
  '55984557096': FORMATOS_TESTE,
  '984557096': FORMATOS_TESTE,
};

// üîß FUN√á√ÉO QUE FOR√áA TESTE DE TODOS OS FORMATOS
function obterFormatosPossiveis(numero: string): string[] {
  console.log('üéØ [FORMATOS] Gerando todos os formatos para:', numero);
  
  const numeroLimpo = numero.replace(/\D/g, '');
  console.log('üéØ [FORMATOS] N√∫mero limpo:', numeroLimpo);
  
  // Se temos mapeamento espec√≠fico, usar
  if (ALLOWED_NUMBERS_MAP[numeroLimpo]) {
    console.log(`üéØ [FORMATOS] Usando mapeamento espec√≠fico: ${FORMATOS_TESTE.length} formatos`);
    return FORMATOS_TESTE;
  }
  
  // Fallback: gerar formatos dinamicamente
  const formatos = [
    `+${numeroLimpo}`,                    // Com + original
    `+55${numeroLimpo.substring(2)}`,     // Com +55
    `+555${numeroLimpo.substring(3)}`,    // Com +555
    numeroLimpo,                          // Sem +
    `55${numeroLimpo.substring(2)}`,      // Sem + com 55
  ];
  
  console.log(`üéØ [FORMATOS] Formatos gerados: ${formatos.length}`);
  return formatos;
}

// Debug inicial
console.log('üöÄ [SYSTEM] Sistema de teste de formatos iniciado');
console.log('üìä [CONFIG] Status das vari√°veis:');
console.log('   WEBHOOK_TOKEN:', process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN ? '‚úÖ' : '‚ùå');
console.log('   PHONE_ID:', process.env.WHATSAPP_PHONE_NUMBER_ID || '‚ùå');
console.log('   ACCESS_TOKEN:', process.env.WHATSAPP_ACCESS_TOKEN ? '‚úÖ' : '‚ùå');
console.log('   GEMINI_KEY:', process.env.GOOGLE_GEMINI_API_KEY ? '‚úÖ' : '‚ùå');
console.log('üß™ [TEST] Formatos configurados para teste:', FORMATOS_TESTE.length);

// GET handler
export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const mode = searchParams.get('hub.mode');
  const token = searchParams.get('hub.verify_token');
  const challenge = searchParams.get('hub.challenge');

  if (mode === 'subscribe' && token === process.env.WHATSAPP_WEBHOOK_VERIFY_TOKEN) {
    console.log('‚úÖ [WEBHOOK] Verifica√ß√£o bem-sucedida');
    return new NextResponse(challenge, { status: 200 });
  }

  return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
}

// POST handler
export async function POST(request: NextRequest) {
  try {
    console.log('üì® [WEBHOOK] Nova mensagem recebida');
    
    if (!process.env.WHATSAPP_PHONE_NUMBER_ID || !process.env.WHATSAPP_ACCESS_TOKEN) {
      console.error('‚ùå [WEBHOOK] Configura√ß√£o inv√°lida');
      return NextResponse.json({ error: 'Configuration error' }, { status: 500 });
    }

    const body = await request.json();
    console.log('üì¶ [WEBHOOK] Payload:', JSON.stringify(body, null, 2));

    const messages = body.entry?.[0]?.changes?.[0]?.value?.messages;
    if (!messages?.length) {
      console.log('‚ÑπÔ∏è [WEBHOOK] Nenhuma mensagem para processar');
      return NextResponse.json({ status: 'ok' }, { status: 200 });
    }

    console.log(`üîÑ [WEBHOOK] Processando ${messages.length} mensagem(ns)`);

    for (const message of messages) {
      await processarMensagemComTeste(message);
    }

    return NextResponse.json({ status: 'ok' }, { status: 200 });

  } catch (error) {
    console.error('‚ùå [WEBHOOK] Erro:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// üß™ PROCESSAMENTO COM TESTE DE FORMATOS
async function processarMensagemComTeste(message: any): Promise<void> {
  const { from, text, type, id } = message;
  
  console.log('üß™ [TEST PROCESS] Iniciando teste de formatos:', {
    from,
    type,
    messageId: id,
    hasText: !!text?.body
  });

  try {
    if (type !== 'text' || !text?.body) {
      console.log('‚ö†Ô∏è [TEST PROCESS] Mensagem ignorada');
      return;
    }

    const userMessage = text.body.trim();
    const lowerMessage = userMessage.toLowerCase();
    
    console.log(`üí¨ [TEST PROCESS] Mensagem: "${userMessage}"`);

    // Comando especial para for√ßar teste
    if (lowerMessage === '/testarformatos' || lowerMessage === 'testar') {
      console.log('üß™ [COMMAND] Comando de teste de formatos detectado');
      await testarTodosFormatos(from);
      return;
    }

    // Comandos normais
    if (lowerMessage === '/test') {
      await tentarEnviarComTodosFormatos(from, '‚úÖ TESTE DE CONECTIVIDADE\n\nSistema funcionando!');
      return;
    }

    if (lowerMessage === '/debug') {
      const debugInfo = await gerarDebugCompleto(from, message);
      await tentarEnviarComTodosFormatos(from, debugInfo);
      return;
    }

    // IA ou mensagem padr√£o
    if (!process.env.GOOGLE_GEMINI_API_KEY) {
      await tentarEnviarComTodosFormatos(from, '‚öôÔ∏è SISTEMA EM TESTE\n\nTestando formatos de n√∫mero.\nUse "/testarformatos" para ver todos os testes.');
      return;
    }

    try {
      const geminiService = getGeminiService();
      const aiResponse = await geminiService.generateResponse(userMessage, from);
      await tentarEnviarComTodosFormatos(from, aiResponse);
    } catch (aiError) {
      console.error('‚ùå [AI] Erro:', aiError);
      await tentarEnviarComTodosFormatos(from, 'ü§ñ IA temporariamente indispon√≠vel.\nUse "/testarformatos" para testar conectividade.');
    }

  } catch (error) {
    console.error('‚ùå [TEST PROCESS] Erro:', error);
    await tentarEnviarComTodosFormatos(from, '‚ö†Ô∏è Erro detectado.\nSistema em modo de teste.');
  }
}

// üéØ FUN√á√ÉO PRINCIPAL - TENTA TODOS OS FORMATOS
async function tentarEnviarComTodosFormatos(numeroOriginal: string, texto: string): Promise<boolean> {
  console.log('üéØ [FORCE TEST] Iniciando teste for√ßado de todos os formatos');
  
  const formatos = obterFormatosPossiveis(numeroOriginal);
  
  console.log(`üß™ [FORCE TEST] Testando ${formatos.length} formatos para: ${numeroOriginal}`);
  
  let sucessos = 0;
  let tentativas = 0;
  
  for (const formato of formatos) {
    tentativas++;
    console.log(`\nüîÑ [TENTATIVA ${tentativas}/${formatos.length}] Testando formato: ${formato}`);
    
    const sucesso = await enviarParaFormato(formato, texto, tentativas);
    
    if (sucesso) {
      sucessos++;
      console.log(`‚úÖ [SUCESSO] Formato funcionou: ${formato}`);
      // Continue testando todos, n√£o pare no primeiro sucesso
    } else {
      console.log(`‚ùå [FALHA] Formato falhou: ${formato}`);
    }
    
    // Pequena pausa entre tentativas
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  console.log(`\nüìä [RESULTADO FINAL] ${sucessos}/${tentativas} formatos funcionaram`);
  
  return sucessos > 0;
}

// üöÄ ENVIO PARA FORMATO ESPEC√çFICO
async function enviarParaFormato(numero: string, texto: string, tentativa: number): Promise<boolean> {
  try {
    const url = `https://graph.facebook.com/v22.0/${process.env.WHATSAPP_PHONE_NUMBER_ID}/messages`;
    
    const payload = {
      messaging_product: 'whatsapp',
      recipient_type: 'individual',
      to: numero,
      type: 'text',
      text: {
        preview_url: false,
        body: `[TESTE ${tentativa}] ${texto.substring(0, 4000)}`
      }
    };

    console.log(`üì§ [SEND ${tentativa}] Para: ${numero}`);
    console.log(`üìù [PAYLOAD ${tentativa}]:`, JSON.stringify(payload, null, 2));

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.WHATSAPP_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    const responseText = await response.text();
    
    console.log(`üì® [RESPONSE ${tentativa}] Status: ${response.status}`);
    console.log(`üì® [RESPONSE ${tentativa}] Body: ${responseText}`);

    if (response.ok) {
      console.log(`üéâ [SUCESSO ${tentativa}] FORMATO ACEITO: ${numero}`);
      return true;
    } else {
      console.log(`üí• [ERRO ${tentativa}] FORMATO REJEITADO: ${numero} - ${response.status}`);
      return false;
    }

  } catch (error) {
    console.error(`‚ùå [ERRO ${tentativa}] Exce√ß√£o ao enviar para ${numero}:`, error);
    return false;
  }
}

// üß™ TESTE EXPL√çCITO DE TODOS OS FORMATOS
async function testarTodosFormatos(numeroOriginal: string): Promise<void> {
  const textoTeste = `üß™ TESTE DE FORMATO DE N√öMERO\n\nTestando conectividade com diferentes formatos.\nEste √© um teste automatizado.`;
  
  console.log('üß™ [EXPLICIT TEST] Iniciando teste expl√≠cito de formatos');
  await tentarEnviarComTodosFormatos(numeroOriginal, textoTeste);
}

// üìä DEBUG COMPLETO
async function gerarDebugCompleto(from: string, message: any): Promise<string> {
  const formatos = obterFormatosPossiveis(from);
  
  return `üîß *DEBUG COMPLETO*\n\n` +
    `üì± *N√∫mero Original:* ${from}\n` +
    `üß™ *Formatos para Teste:* ${formatos.length}\n` +
    `üìã *Lista:*\n${formatos.map((f, i) => `${i+1}. ${f}`).join('\n')}\n\n` +
    `‚öôÔ∏è *Sistema:*\n` +
    `‚Ä¢ WhatsApp API: ${process.env.WHATSAPP_ACCESS_TOKEN ? '‚úÖ' : '‚ùå'}\n` +
    `‚Ä¢ Gemini: ${process.env.GOOGLE_GEMINI_API_KEY ? '‚úÖ' : '‚ùå'}\n\n` +
    `üìä *Message ID:* ${message.id}\n` +
    `üïê *Timestamp:* ${message.timestamp}\n\n` +
    `üöÄ *SISTEMA DE TESTE ATIVO*`;
}
