export interface GeminiService {
  generateResponse(message: string, userId: string): Promise<string>;
  clearHistory(userId: string): void;
}

class GeminiServiceImpl implements GeminiService {
  private apiKey: string;
  // üí° VIS√ÉO GERAL: Este Map armazena apenas o hist√≥rico simples (userId -> Array de mensagens). 
  // O Gemini REST API √© stateless (sem estado), ent√£o o hist√≥rico deve ser inclu√≠do em CADA chamada.
  private conversationHistory: Map<string, any[]> = new Map();
  private workingModel: string | null = null;
  private readonly MAX_HISTORY_MESSAGES = 10; // Limita o hist√≥rico para controle de tokens

  constructor() {
    const apiKey = process.env.GOOGLE_GEMINI_API_KEY || process.env.GEMINI_API_KEY;

    if (!apiKey) {
      // ‚ùå Problema: Vari√°vel de ambiente n√£o definida
      throw new Error('‚ùå GEMINI_API_KEY n√£o configurada. Verifique as vari√°veis no Vercel/Ambiente.');
    }

    this.apiKey = apiKey;
    console.log('ü§ñ [GEMINI] Inicializando com servi√ßo Gemini (v2.5).');
  }

  // 1. Gera√ß√£o de Resposta Principal com Fallback de Modelo
  async generateResponse(message: string, userId: string): Promise<string> {
    try {
      console.log(`ü§ñ [GEMINI] Gerando resposta para: ${userId}`);

      // üéØ MODELOS MAIS EST√ÅVEIS: Focando em modelos can√¥nicos para evitar instabilidade de 'previews'.
      const modelsToTest = [
        'gemini-2.5-flash',
        'gemini-2.5-pro',
      ];

      // Tenta usar o modelo que funcionou anteriormente
      if (this.workingModel) {
        console.log(`‚ö° [GEMINI] Usando modelo est√°vel: ${this.workingModel}`);
        return await this.generateWithDirectAPI(this.workingModel, message, userId);
      }

      // üß™ Testar modelos da fam√≠lia 2.5 at√© encontrar um que funcione
      for (const modelName of modelsToTest) {
        try {
          console.log(`üß™ [GEMINI] Testando modelo: ${modelName}`);

          const response = await this.generateWithDirectAPI(modelName, message, userId);

          // Se chegou aqui, o modelo funciona!
          this.workingModel = modelName;
          console.log(`‚úÖ [GEMINI] Modelo ${modelName} funcionando.`);

          return response;

        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          console.log(`‚ùå [GEMINI] Modelo ${modelName} falhou:`, errorMessage);

          // üí° Se a falha for a mensagem de bloqueio amig√°vel, propaga imediatamente (n√£o tenta outros modelos)
          if (errorMessage.includes('Aten√ß√£o (Pol√≠tica de Conte√∫do da IA)')) {
             throw error; 
          }
          continue; // Tenta o pr√≥ximo modelo
        }
      }

      // Se nenhum modelo funcionou
      throw new new Error('Nenhum modelo Gemini 2.5 dispon√≠vel ap√≥s testes.');

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error('‚ùå [GEMINI] Erro geral:', errorMessage);

      // Se o erro for a mensagem amig√°vel de bloqueio (propagada do generateWithDirectAPI), retorna ela.
      if (errorMessage.includes('Aten√ß√£o (Pol√≠tica de Conte√∫do da IA)')) {
          return errorMessage;
      }
      
      // Fallback para erro de sistema (Chave, API, etc.)
      return `ü§ñ **Assistente Gemini 2.5**\n\n**Status:** üö® Falha Cr√≠tica na IA.\n\n*A IA n√£o est√° conseguindo processar sua solicita√ß√£o neste momento. Por favor, tente novamente mais tarde. (Erro: ${errorMessage.substring(0, 50)}...)*`;
    }
  }

  // 2. Chamada Direta √† API REST com Hist√≥rico e Tratamento de Erro
  private async generateWithDirectAPI(modelName: string, message: string, userId: string): Promise<string> {
    // üí° Preven√ß√£o: Carregar e atualizar o hist√≥rico
    const history = this.conversationHistory.get(userId) || [];
    
    // Adicionar a mensagem atual do usu√°rio ao hist√≥rico (antes de enviar)
    history.push({ role: 'user', parts: [{ text: message }] });

    // üí° Preven√ß√£o: O Gemini REST API usa 'user' e 'model' para conversa√ß√£o.
    const contents = history.slice(-this.MAX_HISTORY_MESSAGES); // Limitar o hist√≥rico

    // üéØ Configura√ß√£o do Sistema (Instru√ß√£o Principal)
    const systemInstruction = `Voc√™ √© um assistente inteligente de uma farm√°cia integrado ao WhatsApp. Sua principal fun√ß√£o √© fornecer informa√ß√µes gerais sobre produtos, hor√°rio de funcionamento e localiza√ß√£o da loja. Voc√™ DEVE ser amig√°vel, √∫til e conciso. Sob NENHUMA circunst√¢ncia, voc√™ deve fornecer aconselhamento m√©dico, diagn√≥stico, recomenda√ß√µes de dosagem ou listar medicamentos para tratamentos espec√≠ficos, pois isso viola as pol√≠ticas de conte√∫do e seguran√ßa. Se for perguntado sobre um medicamento espec√≠fico ou tratamento de sa√∫de, use a mensagem de bloqueio padronizada.`;

    // üéØ API REST v1 EST√ÅVEL
    const url = `https://generativelanguage.googleapis.com/v1/models/${modelName}:generateContent?key=${this.apiKey}`;
    
    const payload = {
        // üí° Adicionado a instru√ß√£o do sistema (System Instruction)
        config: {
            systemInstruction: systemInstruction,
        },
        contents: contents, // Usa o hist√≥rico para o contexto
        generationConfig: {
            maxOutputTokens: 1000,
            temperature: 0.5, // ‚¨áÔ∏è Reduzido para maior factualidade (Farm√°cia)
            topP: 0.8,
            topK: 40
        }
    };

    console.log(`üåê [GEMINI] Chamando API com ${contents.length} mensagens no hist√≥rico.`);

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      // ‚ùå Problema: Erro de Status HTTP (400, 403, 500)
      const errorText = await response.text();
      throw new Error(`API Error ${response.status}: ${errorText}`);
    }

    const data = await response.json();
    console.log('üîç [DEBUG] Resposta Completa da API Gemini:', JSON.stringify(data, null, 2));

    // üöÄ [CORRE√á√ÉO ROBUSTA FINAL] Tratamento de Bloqueios e Estrutura Vazia
    const firstCandidate = data.candidates ? data.candidates[0] : null;

    if (!firstCandidate || !firstCandidate.content || !firstCandidate.content.parts || firstCandidate.content.parts.length === 0) {
        
        // 1. Tratar Hard Block (Feedback de seguran√ßa expl√≠cito)
        if (data.promptFeedback && data.promptFeedback.blockReason) {
            const reason = data.promptFeedback.blockReason;
            const friendlyMessage = `ü§ñ **Aten√ß√£o (Pol√≠tica de Conte√∫do da IA)**
              
*Ol√°! Como assistente de IA, n√£o posso fornecer informa√ß√µes ou recomenda√ß√µes diretas sobre medicamentos ou tratamentos de sa√∫de. Isso √© feito para sua seguran√ßa e para cumprir as diretrizes de conte√∫do m√©dico da Google (Motivo: ${reason}).*
              
**Para sua seguran√ßa e orienta√ß√µes precisas, por favor, consulte diretamente um farmac√™utico em nossa loja ou um m√©dico.**`;

            throw new Error(friendlyMessage); 
        }

        // 2. Tratar Soft Block (Interrup√ß√£o por MAX_TOKENS ou Estrutura Vazia em T√≥pico Sens√≠vel)
        const finishReason = firstCandidate ? firstCandidate.finishReason : 'NO_CANDIDATE';
        
        if (finishReason === 'MAX_TOKENS' || finishReason === 'RECITATION' || finishReason === 'SAFETY') {
            const friendlyMessage = `ü§ñ **Aten√ß√£o (Pol√≠tica de Conte√∫do da IA)**
              
*Ocorreu uma interrup√ß√£o na gera√ß√£o da resposta devido √† sensibilidade do tema (sa√∫de/medicamentos). Para sua seguran√ßa, como assistente de IA, n√£o posso fornecer informa√ß√µes ou recomenda√ß√µes diretas sobre medicamentos ou tratamentos.*
              
**Para sua seguran√ßa e orienta√ß√µes precisas, por favor, consulte diretamente um farmac√™utico em nossa loja ou um m√©dico.**`;
            
            throw new Error(friendlyMessage);
        }

        // 3. Falha gen√©rica na estrutura
        throw new Error(`API Gemini: Resposta inv√°lida ou incompleta. Motivo: ${finishReason}`);
    }

    // 4. Se a resposta for v√°lida, extrair e adicionar ao hist√≥rico
    const aiResponse = firstCandidate.content.parts[0].text;
    
    // Adicionar a resposta do modelo ao hist√≥rico para o pr√≥ximo turno
    history.push({ role: 'model', parts: [{ text: aiResponse }] });
    this.conversationHistory.set(userId, history);
    
    console.log(`‚úÖ [GEMINI] Resposta Gemini 2.5 (${aiResponse.length} chars). Hist√≥rico atualizado.`);

    return aiResponse;
  }

  // 3. Limpeza do Hist√≥rico (Para iniciar um novo t√≥pico)
  clearHistory(userId: string): void {
    console.log(`üóëÔ∏è [GEMINI] Hist√≥rico limpo: ${userId}`);
    this.conversationHistory.delete(userId);
  }
}

// 4. Inst√¢ncia Singleton
let geminiServiceInstance: GeminiService | null = null;

export function getGeminiService(): GeminiService {
  if (!geminiServiceInstance) {
    geminiServiceInstance = new GeminiServiceImpl();
  }
  return geminiServiceInstance;
}
