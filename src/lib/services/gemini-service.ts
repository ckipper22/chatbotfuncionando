export interface GeminiService {
  generateResponse(message: string, userId: string): Promise<string>;
  clearHistory(userId: string): void;
}

class GeminiServiceImpl implements GeminiService {
  private apiKey: string;
  // üí° Implementa√ß√£o para salvar o hist√≥rico por usu√°rio
  private conversationHistory: Map<string, any[]> = new Map(); 
  private workingModel: string | null = null;
  private readonly MAX_HISTORY_MESSAGES = 10; 
  
  // üéØ INSTRU√á√ÉO DE SISTEMA (Injetada no prompt para compatibilidade com API V1)
  private readonly SYSTEM_INSTRUCTION = `Voc√™ √© um assistente inteligente de uma farm√°cia integrado ao WhatsApp. Sua principal fun√ß√£o √© fornecer informa√ß√µes gerais sobre produtos, hor√°rio de funcionamento e localiza√ß√£o. Voc√™ deve ser amig√°vel, √∫til e conciso. Sob NENHUMA circunst√¢ncia, forne√ßa aconselhamento m√©dico, diagn√≥stico ou recomenda√ß√µes de dosagem. Se for perguntado sobre um medicamento ou tratamento de sa√∫de, sua resposta DEVE ser: "Aten√ß√£o (Pol√≠tica de Conte√∫do da IA) - Para sua seguran√ßa, por favor, consulte diretamente um farmac√™utico em nossa loja ou um m√©dico. Como assistente, n√£o posso fornecer informa√ß√µes ou recomenda√ß√µes m√©dicas."`;

  constructor() {
    const apiKey = process.env.GOOGLE_GEMINI_API_KEY || process.env.GEMINI_API_KEY;
    
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY n√£o configurada');
    }
    
    this.apiKey = apiKey;
    console.log('ü§ñ [GEMINI] Inicializando com modelos Gemini 2.5 (atuais) e l√≥gica de seguran√ßa.');
  }

  async generateResponse(message: string, userId: string): Promise<string> {
    try {
      console.log(`ü§ñ [GEMINI] Gerando resposta para: ${userId}`);

      // üéØ MODELOS ATUAIS E EST√ÅVEIS GEMINI 2.5 (MANTIDO SUA LISTA)
      const modelsToTest = [
        'gemini-2.5-flash', 
        'gemini-2.5-pro',
        'gemini-2.5-flash-lite-preview-09-2025',
        'gemini-2.5-flash-preview-09-2025'
      ];

      // Se j√° encontramos um modelo que funciona, usar ele
      if (this.workingModel) {
        console.log(`‚ö° [GEMINI] Usando modelo Gemini 2.5: ${this.workingModel}`);
        // üí° userId adicionado para gerenciar hist√≥rico
        return await this.generateWithDirectAPI(this.workingModel, message, userId); 
      }

      // Testar modelos da fam√≠lia 2.5 at√© encontrar um que funcione
      for (const modelName of modelsToTest) {
        try {
          console.log(`üß™ [GEMINI] Testando modelo 2.5: ${modelName}`);
          
          // üí° userId adicionado para gerenciar hist√≥rico
          const response = await this.generateWithDirectAPI(modelName, message, userId); 
          
          // Se chegou aqui, o modelo funciona!
          this.workingModel = modelName;
          console.log(`‚úÖ [GEMINI] Modelo Gemini 2.5 funcionando: ${modelName}`);
          
          return response;
          
        } catch (error) {
          const errorMessage = error instanceof Error ? error.message : String(error);
          console.log(`‚ùå [GEMINI] Modelo ${modelName} falhou:`, errorMessage);

          // üí° Interrompe o teste de modelos se for um bloqueio de conte√∫do
          if (errorMessage.includes('Aten√ß√£o (Pol√≠tica de Conte√∫do da IA)')) {
             throw error; 
          }
          
          continue;
        }
      }

      // Se nenhum modelo funcionou
      throw new Error('Nenhum modelo Gemini 2.5 dispon√≠vel');

    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error('‚ùå [GEMINI] Erro geral:', errorMessage);

      // üí° Se for o erro de bloqueio, retorna a mensagem amig√°vel
      if (errorMessage.includes('Aten√ß√£o (Pol√≠tica de Conte√∫do da IA)')) {
          return errorMessage;
      }
      
      // Fallback original para erro de sistema
      return `ü§ñ **Assistente Gemini 2.5**

**Status:** Configurando modelos mais recentes
**Fam√≠lia:** Gemini 2.5 (outubro 2025)

üì± **WhatsApp**: ‚úÖ Funcionando perfeitamente
üîß **IA**: üß™ Testando Gemini 2.5
‚è∞ **Modelos**: Atualizados para fam√≠lia atual

**Gemini 2.5 testados:**
‚Ä¢ gemini-2.5-flash (recomendado)
‚Ä¢ gemini-2.5-pro (tarefas complexas)
‚Ä¢ gemini-2.5-flash-lite (econ√¥mico)

**Motivo da atualiza√ß√£o:**
Modelos 1.x descontinuados em abril/2025

Use */status* para verificar progresso.`;
    }
  }

  // üí° userId adicionado para hist√≥rico de conversa√ß√£o
  private async generateWithDirectAPI(modelName: string, message: string, userId: string): Promise<string> {
    
    // üí° 1. Gerenciamento do Hist√≥rico: Carrega o hist√≥rico e adiciona a nova mensagem
    const history = this.conversationHistory.get(userId) || [];
    
    // Adicionar a mensagem atual do usu√°rio ao hist√≥rico (antes de enviar)
    history.push({ role: 'user', parts: [{ text: message }] });

    // üí° 2. Inje√ß√£o da Instru√ß√£o de Sistema no Prompt
    const fullPrompt = `${this.SYSTEM_INSTRUCTION} \n\n--- Mensagem do Usu√°rio: ${message}`;
    
    // O hist√≥rico DEVE ser recriado para garantir que a instru√ß√£o de sistema entre na √∫ltima mensagem
    const contents = history.slice(-this.MAX_HISTORY_MESSAGES); 
    
    // Substitui a √∫ltima mensagem do usu√°rio pelo prompt completo com a instru√ß√£o de sistema
    // Isso garante que a API V1 aceite o payload.
    if (contents.length > 0) {
        contents[contents.length - 1] = { role: 'user', parts: [{ text: fullPrompt }] };
    } else {
        contents.push({ role: 'user', parts: [{ text: fullPrompt }] });
    }
    
    // üéØ API REST v1 EST√ÅVEL COM MODELOS GEMINI 2.5
    const url = `https://generativelanguage.googleapis.com/v1/models/${modelName}:generateContent?key=${this.apiKey}`;
    
    const payload = {
      // üí° Contents agora inclui o hist√≥rico e a instru√ß√£o de sistema
      contents: contents, 
      generationConfig: {
        maxOutputTokens: 1000,
        temperature: 0.5, // ‚¨áÔ∏è Reduzido para maior factualidade e seguran√ßa
        topP: 0.8,
        topK: 40
      }
    };

    console.log(`üåê [GEMINI] Chamando Gemini 2.5: ${modelName} com ${contents.length} mensagens no hist√≥rico.`);

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API Error ${response.status}: ${errorText}`);
    }

    const data = await response.json();
    
    // üöÄ [CORRE√á√ÉO ROBUSTA] Tratamento de Bloqueios e Estrutura Vazia
    const firstCandidate = data.candidates ? data.candidates[0] : null;

    if (!firstCandidate || !firstCandidate.content || !firstCandidate.content.parts || firstCandidate.content.parts.length === 0) {
        
        // 1. Tratar Hard Block (Feedback de seguran√ßa expl√≠cito)
        if (data.promptFeedback && data.promptFeedback.blockReason) {
            const reason = data.promptFeedback.blockReason;
            const friendlyMessage = `ü§ñ **Aten√ß√£o (Pol√≠tica de Conte√∫do da IA)**
              
*Ol√°! Como assistente de IA, n√£o posso fornecer informa√ß√µes ou recomenda√ß√µes diretas sobre medicamentos ou tratamentos de sa√∫de. Isso √© feito para sua seguran√ßa e para cumprir as diretrizes de conte√∫do m√©dico da Google (Motivo: ${reason}).*
              
**Para sua seguran√ßa e orienta√ß√µes precisas, por favor, consulte diretamente um farmac√™utico em nossa loja ou um m√©dico.**`;

            throw new Error(friendlyMessage); 
        }

        // 2. Tratar Soft Block (MAX_TOKENS, SAFETY, ou Estrutura Vazia)
        const finishReason = firstCandidate ? firstCandidate.finishReason : 'NO_CANDIDATE';
        
        if (finishReason === 'MAX_TOKENS' || finishReason === 'RECITATION' || finishReason === 'SAFETY') {
            // Retorna a mensagem amig√°vel de bloqueio
            const friendlyMessage = `ü§ñ **Aten√ß√£o (Pol√≠tica de Conte√∫do da IA)**
              
*Ocorreu uma interrup√ß√£o na gera√ß√£o da resposta devido √† sensibilidade do tema (sa√∫de/medicamentos). Para sua seguran√ßa, como assistente de IA, n√£o posso fornecer informa√ß√µes ou recomenda√ß√µes diretas sobre medicamentos ou tratamentos.*
              
**Para sua seguran√ßa e orienta√ß√µes precisas, por favor, consulte diretamente um farmac√™utico em nossa loja ou um m√©dico.**`;
            
            throw new Error(friendlyMessage);
        }

        // 3. Falha gen√©rica na estrutura
        throw new Error(`Resposta inv√°lida ou incompleta da API Gemini 2.5. Motivo: ${finishReason}`);
    }


    const aiResponse = firstCandidate.content.parts[0].text;
    
    // üí° 3. Gerenciamento do Hist√≥rico: Adiciona a resposta do modelo e salva
    history.push({ role: 'model', parts: [{ text: aiResponse }] });
    this.conversationHistory.set(userId, history);

    console.log(`‚úÖ [GEMINI] Resposta Gemini 2.5 (${aiResponse.length} chars). Hist√≥rico atualizado.`);
    
    return aiResponse;
  }

  clearHistory(userId: string): void {
    console.log(`üóëÔ∏è [GEMINI] Hist√≥rico limpo: ${userId}`);
    this.conversationHistory.delete(userId);
  }
}

let geminiServiceInstance: GeminiService | null = null;

export function getGeminiService(): GeminiService {
  if (!geminiServiceInstance) {
    geminiServiceInstance = new GeminiServiceImpl();
  }
  return geminiServiceInstance;
}
