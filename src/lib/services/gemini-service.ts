import { GoogleGenerativeAI } from '@google/generative-ai';

export interface GeminiService {
  generateResponse(message: string, userId: string): Promise<string>;
  clearHistory(userId: string): void;
}

class GeminiServiceImpl implements GeminiService {
  private genAI: GoogleGenerativeAI;
  private conversationHistory: Map<string, any[]> = new Map();
  private workingModel: string | null = null;

  constructor() {
    const apiKey = process.env.GOOGLE_GEMINI_API_KEY || process.env.GEMINI_API_KEY;
    
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY n√£o configurada');
    }
    
    console.log('ü§ñ [GEMINI] Inicializando com teste autom√°tico de modelos');
    this.genAI = new GoogleGenerativeAI(apiKey);
  }

  async generateResponse(message: string, userId: string): Promise<string> {
    try {
      console.log(`ü§ñ [GEMINI] Gerando resposta para: ${userId}`);

      // üß™ LISTA DE MODELOS PARA TESTAR (DO MAIS NOVO PARA O MAIS ANTIGO)
      const modelsToTest = [
        'gemini-1.5-pro-latest',
        'gemini-1.5-flash-latest', 
        'gemini-1.5-pro',
        'gemini-1.5-flash',
        'gemini-pro',
        'gemini-1.0-pro',
        'gemini-1.0-pro-latest'
      ];

      // Se j√° encontramos um modelo que funciona, usar ele
      if (this.workingModel) {
        console.log(`üéØ [GEMINI] Usando modelo conhecido: ${this.workingModel}`);
        return await this.generateWithModel(this.workingModel, message);
      }

      // Testar modelos at√© encontrar um que funcione
      for (const modelName of modelsToTest) {
        try {
          console.log(`üß™ [GEMINI] Testando modelo: ${modelName}`);
          
          const response = await this.generateWithModel(modelName, message);
          
          // Se chegou aqui, o modelo funciona!
          this.workingModel = modelName;
          console.log(`‚úÖ [GEMINI] Modelo funcionando encontrado: ${modelName}`);
          
          return response;
          
        } catch (error) {
          // üîß CORRE√á√ÉO TYPESCRIPT: Cast do error para Error
          const errorMessage = error instanceof Error ? error.message : String(error);
          console.log(`‚ùå [GEMINI] Modelo ${modelName} falhou:`, errorMessage);
          continue;
        }
      }

      // Se nenhum modelo funcionou
      throw new Error('Nenhum modelo Gemini dispon√≠vel');

    } catch (error) {
      // üîß CORRE√á√ÉO TYPESCRIPT: Cast do error para Error
      const errorMessage = error instanceof Error ? error.message : String(error);
      console.error('‚ùå [GEMINI] Erro geral:', errorMessage);
      
      return `ü§ñ **Assistente em Configura√ß√£o**

Estou testando diferentes modelos de IA para encontrar o melhor dispon√≠vel.

üì± **WhatsApp**: ‚úÖ Funcionando
üîß **IA**: üß™ Testando modelos
‚è∞ **Status**: Configura√ß√£o autom√°tica

**Modelos testados:**
‚Ä¢ gemini-1.5-pro-latest
‚Ä¢ gemini-1.5-flash-latest  
‚Ä¢ gemini-1.5-pro
‚Ä¢ gemini-1.5-flash
‚Ä¢ gemini-pro

Use */test* para verificar progresso.`;
    }
  }

  private async generateWithModel(modelName: string, message: string): Promise<string> {
    const model = this.genAI.getGenerativeModel({ 
      model: modelName,
      generationConfig: {
        maxOutputTokens: 1000,
        temperature: 0.7,
      },
    });

    const result = await model.generateContent([
      { text: `Responda em portugu√™s brasileiro de forma amig√°vel e concisa: ${message}` }
    ]);
    
    const response = await result.response;
    const aiResponse = response.text();

    console.log(`‚úÖ [GEMINI] Resposta de ${modelName} (${aiResponse.length} chars)`);
    return aiResponse;
  }

  clearHistory(userId: string): void {
    console.log(`üóëÔ∏è [GEMINI] Hist√≥rico limpo: ${userId}`);
    this.conversationHistory.delete(userId);
    // N√£o limpar o modelo funcionando
  }
}

let geminiServiceInstance: GeminiService | null = null;

export function getGeminiService(): GeminiService {
  if (!geminiServiceInstance) {
    geminiServiceInstance = new GeminiServiceImpl();
  }
  return geminiServiceInstance;
}
